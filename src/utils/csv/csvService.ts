interface DonationData {
  id: number;
  name: string;
  email: string;
  amount: number;
  message?: string;
  created_at: string;
  method: string;
  transaction_id?: string;
}

interface DonorData {
  id: number;
  name: string;
  email: string;
  avatar?: string;
  total_donated: number;
  frequency: string;
  last_donation: string;
}

interface DonationSummary {
  totalDonations: number;
  totalAmount: number;
  averageDonation: number;
  uniqueDonors: number;
  dateRange: {
    start: string;
    end: string;
  };
  paymentMethods: Record<string, number>;
  monthlyBreakdown: Record<string, number>;
  topDonors: Array<{
    name: string;
    email: string;
    totalDonated: number;
    donationCount: number;
  }>;
}

export class CSVService {
  /**
   * Generate professional header for CSV exports
   */
  private static generateHeader(reportType: string, dateRange?: { start: string; end: string }, totalRecords?: number): string {
    const now = new Date();
    const exportDate = now.toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    const exportTime = now.toLocaleTimeString('en-US', { 
      hour: '2-digit', 
      minute: '2-digit',
      hour12: true 
    });

    const headerRows = [
      '================================================',
      '           AFAW ORGANIZATION',
      '    Donation Management System - Export Report',
      '================================================',
      '',
      `REPORT TYPE: ${reportType.toUpperCase()}`,
      `EXPORT DATE: ${exportDate}`,
      `EXPORT TIME: ${exportTime}`,
    ];

    if (dateRange && dateRange.start && dateRange.end) {
      try {
        const startDate = new Date(dateRange.start).toLocaleDateString('en-US', { 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric' 
        });
        const endDate = new Date(dateRange.end).toLocaleDateString('en-US', { 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric' 
        });
        headerRows.push(`DATA PERIOD: ${startDate} to ${endDate}`);
      } catch (error) {
        console.warn('Invalid date range provided:', dateRange);
        headerRows.push(`DATA PERIOD: ${dateRange.start} to ${dateRange.end}`);
      }
    }

    if (totalRecords !== undefined) {
      headerRows.push(`TOTAL RECORDS: ${totalRecords.toLocaleString()}`);
    }

    headerRows.push('', 'Generated by AFAW Dashboard System', '================================================', '');
    
    // Convert each header row to proper CSV format (single column)
    return headerRows.map(row => `"${row}"`).join('\n');
  }

  /**
   * Convert array of objects to CSV string with improved formatting
   */
  private static arrayToCSV(data: any[], headers: string[]): string {
    if (data.length === 0) return headers.join(',') + '\n';

    const csvRows = [];
    
    // Add headers with proper spacing
    csvRows.push(headers.join(','));
    
    // Add data rows with improved formatting
    for (const row of data) {
      const values = headers.map(header => {
        const value = row[header];
        // Handle values that contain commas, quotes, newlines, or tabs
        if (value === null || value === undefined) return '';
        const stringValue = String(value);
        
        // Clean up any problematic characters
        const cleanedValue = stringValue
          .replace(/\t/g, ' ')  // Replace tabs with spaces
          .replace(/\r\n/g, ' ') // Replace Windows line breaks
          .replace(/\n/g, ' ')   // Replace Unix line breaks
          .replace(/\r/g, ' ')   // Replace Mac line breaks
          .trim();               // Remove leading/trailing whitespace
        
        // Escape values that contain commas, quotes, or other special characters
        if (cleanedValue.includes(',') || cleanedValue.includes('"') || cleanedValue.includes('\n')) {
          return `"${cleanedValue.replace(/"/g, '""')}"`;
        }
        return cleanedValue;
      });
      csvRows.push(values.join(','));
    }
    
    return csvRows.join('\n');
  }

  /**
   * Download CSV file
   */
  private static downloadCSV(csvContent: string, filename: string): void {
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', filename);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  }

  /**
   * Export all donations to CSV
   */
  static exportDonationsCSV(donations: DonationData[], dateRange?: { start: string; end: string }): void {
    const headers = [
      'Receipt ID',
      'Donor Name',
      'Email',
      'Amount ($)',
      'Payment Method',
      'Donation Date',
      'Donation Time',
      'Message',
      'Transaction ID'
    ];

    const csvData = donations.map(donation => ({
      'Receipt ID': donation.id,
      'Donor Name': donation.name,
      'Email': donation.email,
      'Amount ($)': donation.amount.toFixed(2),
      'Payment Method': donation.method,
      'Donation Date': new Date(donation.created_at).toLocaleDateString(),
      'Donation Time': new Date(donation.created_at).toLocaleTimeString(),
      'Message': donation.message || '',
      'Transaction ID': donation.transaction_id || ''
    }));

    // Generate header
    const header = this.generateHeader('Donations Export', dateRange, donations.length);
    
    // Combine header with data (add empty line separator)
    const csvContent = header + '\n' + this.arrayToCSV(csvData, headers);
    const filename = `donations-export-${new Date().toISOString().split('T')[0]}.csv`;
    this.downloadCSV(csvContent, filename);
  }

  /**
   * Export all donors to CSV
   */
  static exportDonorsCSV(donors: DonorData[], dateRange?: { start: string; end: string }): void {
    const headers = [
      'Donor ID',
      'Name',
      'Email',
      'Total Donated ($)',
      'Donation Frequency',
      'Last Donation Date',
      'Last Donation Time',
      'Days Since Last Donation'
    ];

    const csvData = donors.map(donor => {
      const lastDonationDate = new Date(donor.last_donation);
      const daysSinceLastDonation = Math.floor(
        (new Date().getTime() - lastDonationDate.getTime()) / (1000 * 60 * 60 * 24)
      );

      return {
        'Donor ID': donor.id,
        'Name': donor.name,
        'Email': donor.email,
        'Total Donated ($)': donor.total_donated.toFixed(2),
        'Donation Frequency': donor.frequency,
        'Last Donation Date': lastDonationDate.toLocaleDateString(),
        'Last Donation Time': lastDonationDate.toLocaleTimeString(),
        'Days Since Last Donation': daysSinceLastDonation
      };
    });

    // Generate header
    const header = this.generateHeader('Donors Export', dateRange, donors.length);
    
    // Combine header with data (add empty line separator)
    const csvContent = header + '\n' + this.arrayToCSV(csvData, headers);
    const filename = `donors-export-${new Date().toISOString().split('T')[0]}.csv`;
    this.downloadCSV(csvContent, filename);
  }

  /**
   * Generate detailed donation summary
   */
  static generateDonationSummary(donations: DonationData[]): DonationSummary {
    const totalDonations = donations.length;
    const totalAmount = donations.reduce((sum, donation) => sum + donation.amount, 0);
    const averageDonation = totalDonations > 0 ? totalAmount / totalDonations : 0;
    const uniqueDonors = new Set(donations.map(d => d.email)).size;

    // Date range
    const dates = donations.map(d => new Date(d.created_at)).sort((a, b) => a.getTime() - b.getTime());
    const dateRange = {
      start: dates.length > 0 ? dates[0].toISOString().split('T')[0] : '',
      end: dates.length > 0 ? dates[dates.length - 1].toISOString().split('T')[0] : ''
    };

    // Payment methods breakdown
    const paymentMethods: Record<string, number> = {};
    donations.forEach(donation => {
      paymentMethods[donation.method] = (paymentMethods[donation.method] || 0) + 1;
    });

    // Monthly breakdown
    const monthlyBreakdown: Record<string, number> = {};
    donations.forEach(donation => {
      const month = new Date(donation.created_at).toISOString().substring(0, 7); // YYYY-MM
      monthlyBreakdown[month] = (monthlyBreakdown[month] || 0) + donation.amount;
    });

    // Top donors
    const donorStats: Record<string, { name: string; email: string; total: number; count: number }> = {};
    donations.forEach(donation => {
      if (!donorStats[donation.email]) {
        donorStats[donation.email] = {
          name: donation.name,
          email: donation.email,
          total: 0,
          count: 0
        };
      }
      donorStats[donation.email].total += donation.amount;
      donorStats[donation.email].count += 1;
    });

    const topDonors = Object.values(donorStats)
      .sort((a, b) => b.total - a.total)
      .slice(0, 10)
      .map(donor => ({
        name: donor.name,
        email: donor.email,
        totalDonated: donor.total,
        donationCount: donor.count
      }));

    return {
      totalDonations,
      totalAmount,
      averageDonation,
      uniqueDonors,
      dateRange,
      paymentMethods,
      monthlyBreakdown,
      topDonors
    };
  }

  /**
   * Export detailed summary report to CSV
   */
  static exportSummaryReport(donations: DonationData[]): void {
    const summary = this.generateDonationSummary(donations);
    
    // Create summary data with improved formatting
    const summaryData = [
      { Metric: 'OVERVIEW', Value: '', Value2: '', Value3: '' },
      { Metric: 'Total Donations', Value: summary.totalDonations, Value2: '', Value3: '' },
      { Metric: 'Total Amount ($)', Value: summary.totalAmount.toFixed(2), Value2: '', Value3: '' },
      { Metric: 'Average Donation ($)', Value: summary.averageDonation.toFixed(2), Value2: '', Value3: '' },
      { Metric: 'Unique Donors', Value: summary.uniqueDonors, Value2: '', Value3: '' },
      { Metric: '', Value: '', Value2: '', Value3: '' }, // Empty row
      { Metric: 'PAYMENT METHODS BREAKDOWN', Value: '', Value2: '', Value3: '' },
      { Metric: 'Method', Value: 'Count', Value2: 'Percentage', Value3: '' },
      ...Object.entries(summary.paymentMethods).map(([method, count]) => {
        const percentage = ((count / summary.totalDonations) * 100).toFixed(1);
        return {
          Metric: method,
          Value: count,
          Value2: `${percentage}%`,
          Value3: ''
        };
      }),
      { Metric: '', Value: '', Value2: '', Value3: '' }, // Empty row
      { Metric: 'MONTHLY BREAKDOWN', Value: '', Value2: '', Value3: '' },
      { Metric: 'Month', Value: 'Amount ($)', Value2: 'Donations', Value3: 'Avg ($)' },
      ...Object.entries(summary.monthlyBreakdown).map(([month, amount]) => {
        // Calculate donations for this month from the original data
        const monthDonations = donations.filter(d => 
          new Date(d.created_at).toISOString().substring(0, 7) === month
        ).length;
        const avgAmount = monthDonations > 0 ? (amount / monthDonations).toFixed(2) : '0.00';
        return {
          Metric: month,
          Value: amount.toFixed(2),
          Value2: monthDonations,
          Value3: avgAmount
        };
      }),
      { Metric: '', Value: '', Value2: '', Value3: '' }, // Empty row
      { Metric: 'TOP DONORS', Value: '', Value2: '', Value3: '' },
      { Metric: 'Rank', Value: 'Name', Value2: 'Email', Value3: 'Total Donated ($)' },
      ...summary.topDonors.map((donor, index) => ({
        Metric: `#${index + 1}`,
        Value: donor.name,
        Value2: donor.email,
        Value3: donor.totalDonated.toFixed(2)
      }))
    ];

    // Generate header with date range from summary
    const dateRange = { start: summary.dateRange.start, end: summary.dateRange.end };
    const header = this.generateHeader('Summary Report', dateRange, summary.totalDonations);

    const headers = ['Metric', 'Value', 'Value2', 'Value3'];
    const csvContent = header + '\n' + this.arrayToCSV(summaryData, headers);
    const filename = `donation-summary-report-${new Date().toISOString().split('T')[0]}.csv`;
    this.downloadCSV(csvContent, filename);
  }

  /**
   * Export monthly donation trends
   */
  static exportMonthlyTrends(donations: DonationData[]): void {
    const monthlyData: Record<string, { donations: number; amount: number; donors: Set<string> }> = {};
    
    donations.forEach(donation => {
      const month = new Date(donation.created_at).toISOString().substring(0, 7); // YYYY-MM
      if (!monthlyData[month]) {
        monthlyData[month] = { donations: 0, amount: 0, donors: new Set() };
      }
      monthlyData[month].donations += 1;
      monthlyData[month].amount += donation.amount;
      monthlyData[month].donors.add(donation.email);
    });

    // Calculate date range from donations
    const dates = donations.map(d => new Date(d.created_at)).sort((a, b) => a.getTime() - b.getTime());
    const dateRange = dates.length > 0 ? {
      start: dates[0].toISOString().split('T')[0],
      end: dates[dates.length - 1].toISOString().split('T')[0]
    } : undefined;

    const headers = ['Month', 'Total Donations', 'Total Amount ($)', 'Average Amount ($)', 'Unique Donors', 'Growth Rate'];
    const csvData = Object.entries(monthlyData)
      .sort(([a], [b]) => a.localeCompare(b))
      .map(([month, data], index, array) => {
        const avgAmount = (data.amount / data.donations).toFixed(2);
        let growthRate = 'N/A';
        
        // Calculate growth rate compared to previous month
        if (index > 0) {
          const prevMonth = array[index - 1][1];
          if (prevMonth.amount > 0) {
            const growth = ((data.amount - prevMonth.amount) / prevMonth.amount * 100).toFixed(1);
            growthRate = `${growth}%`;
          }
        }
        
        return {
          'Month': month,
          'Total Donations': data.donations,
          'Total Amount ($)': data.amount.toFixed(2),
          'Average Amount ($)': avgAmount,
          'Unique Donors': data.donors.size,
          'Growth Rate': growthRate
        };
      });

    // Generate header
    const header = this.generateHeader('Monthly Trends Report', dateRange, donations.length);
    
    // Combine header with data (add empty line separator)
    const csvContent = header + '\n' + this.arrayToCSV(csvData, headers);
    const filename = `monthly-donation-trends-${new Date().toISOString().split('T')[0]}.csv`;
    this.downloadCSV(csvContent, filename);
  }

}





